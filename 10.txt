10


import numpy as np
import matplotlib.pyplot as plt

# Define points and initial centroids
points = {
    "P1": [2, 10],
    "P2": [2, 5],
    "P3": [8, 4],
    "P4": [5, 8],
    "P5": [7, 5],
    "P6": [6, 4],
    "P7": [1, 2],
    "P8": [4, 9]
}

# Initial centroids
m1 = points["P1"]  # Cluster 1 centroid
m2 = points["P4"]  # Cluster 2 centroid
m3 = points["P7"]  # Cluster 3 centroid

def euclidean_distance(p1, p2):
    """Calculate Euclidean distance between two points."""
    return np.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

def assign_clusters(points, centroid1, centroid2, centroid3):
    """Assign points to the nearest centroid."""
    clusters = {"C1": [], "C2": [], "C3": []}
    for point, coords in points.items():
        d1 = euclidean_distance(coords, centroid1)
        d2 = euclidean_distance(coords, centroid2)
        d3 = euclidean_distance(coords, centroid3)
        distances = [d1, d2, d3]
        cluster_index = np.argmin(distances)  # Index of closest centroid
        if cluster_index == 0:
            clusters["C1"].append(point)
        elif cluster_index == 1:
            clusters["C2"].append(point)
        else:
            clusters["C3"].append(point)
    return clusters

def update_centroid(cluster_points, points):
    """Update centroid based on the mean of cluster points."""
    cluster_coords = [points[point] for point in cluster_points]
    return np.mean(cluster_coords, axis=0).tolist()

# Step 1: Perform clustering
clusters = assign_clusters(points, m1, m2, m3)

# Step 2: Update centroids
new_m1 = update_centroid(clusters["C1"], points)
new_m2 = update_centroid(clusters["C2"], points)
new_m3 = update_centroid(clusters["C3"], points)

# Step 3: Answer the questions
p6_cluster = "C1" if "P6" in clusters["C1"] else "C2" if "P6" in clusters["C2"] else "C3"
m3_population = len(clusters["C3"])

# Output
print(f"1] P6 belongs to: {p6_cluster}")
print(f"2] Population of cluster around m3: {m3_population}")
print(f"3] Updated centroids: m1={new_m1}, m2={new_m2}, m3={new_m3}")
print("\nPoints in each cluster:")
print(f"C1: {clusters['C1']} -> Centroid: {new_m1}")
print(f"C2: {clusters['C2']} -> Centroid: {new_m2}")
print(f"C3: {clusters['C3']} -> Centroid: {new_m3}")